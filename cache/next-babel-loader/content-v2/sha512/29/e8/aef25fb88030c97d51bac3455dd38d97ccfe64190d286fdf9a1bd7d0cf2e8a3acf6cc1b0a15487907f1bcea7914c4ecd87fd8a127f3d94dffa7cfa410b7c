{"ast":null,"code":"function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) { symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); } keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport { EMAIL_SENDER_URL } from '../config/constants';\nimport api from './api';\nexport default class SendEmailService {\n  static send(credentials) {\n    const isMessageInCredentials = credentials.message.trim();\n\n    const data = _objectSpread({\n      name: credentials.name,\n      email: credentials.email\n    }, isMessageInCredentials && {\n      message: credentials.message\n    });\n\n    fetch(EMAIL_SENDER_URL, {\n      method: 'POST',\n      headers: {\n        origin: 'http://localhost:3000'\n      },\n      body: JSON.stringify(data)\n    }).then(res => res.ok ? res : Promise.reject(res)).then(() => {\n      return api.post('/api/request/rfsd1sdsfds454v36789s3', _objectSpread(_objectSpread({\n        name: credentials.name,\n        email: credentials.email\n      }, isMessageInCredentials && {\n        message: credentials.message\n      }), {}, {\n        response: 'good',\n        form_name: credentials.formName\n      }));\n    }).catch(() => {\n      return api.post('/api/request/rfsd1sdsfds454v36789s3', _objectSpread(_objectSpread({\n        name: credentials.name,\n        email: credentials.email\n      }, isMessageInCredentials && {\n        message: credentials.message\n      }), {}, {\n        response: 'bad',\n        form_name: credentials.formName\n      }));\n    });\n  }\n\n}","map":null,"metadata":{},"sourceType":"module"}