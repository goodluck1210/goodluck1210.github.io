{"ast":null,"code":"function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) { symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); } keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport Image from 'next/image';\nimport { useState, useCallback, useEffect } from 'react';\nimport { Modal } from 'reactstrap';\nimport styles from './GetInTouch.module.scss';\nimport CustomBtn from '../../_elements/customButton/customBtn';\nimport { en } from '../../../config/en';\nimport { FORM_NAMES } from '../../../config/constants';\nimport CustomInput from '../../_elements/CustomInput/CustomInput';\nimport useWindowSize from '../../../hooks/useWindowSize';\nimport setBackground from '../../../utils/setBackground';\nimport SendEmailService from '../../../services/sendEmail';\nimport validator from '../../../utils/validation/validateEmail';\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nimport { jsxs as _jsxs } from \"react/jsx-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-runtime\";\n\nconst GetInTouch = () => {\n  const {\n    getInTouch,\n    submitForm,\n    TUAForm,\n    TUADescription,\n    TUATitle,\n    getInTouchModalText\n  } = en;\n  const size = useWindowSize();\n  const {\n    0: modal,\n    1: setModal\n  } = useState(false);\n  const {\n    0: submitedModal,\n    1: setSubmitedModal\n  } = useState(false);\n\n  const openModal = () => {\n    setModal(true);\n  };\n\n  const closeModal = () => {\n    setModal(false);\n  };\n\n  const toggleModal = () => {\n    setModal(!modal);\n  };\n\n  const toggleSubmitedModal = () => {\n    setSubmitedModal(!submitedModal);\n  };\n\n  const bgImg = {\n    mb: '/images/blog/getInTouch/offM.jpg',\n    tabl: '/images/blog/getInTouch/offT.jpg',\n    desk: '/images/blog/getInTouch/offD.jpg'\n  };\n  const {\n    0: contactValues,\n    1: setContactValues\n  } = useState({\n    name: '',\n    email: '',\n    message: '',\n    formName: FORM_NAMES.BLOG_ARTICLE_FORM\n  });\n  const {\n    0: error,\n    1: setError\n  } = useState('');\n  useEffect(() => {\n    setError('');\n  }, [contactValues.email]);\n  const changeHandler = useCallback(({\n    target\n  }) => {\n    const form = target.closest('form').id;\n\n    if (form === 'TUAForm') {\n      setContactValues(_objectSpread(_objectSpread({}, contactValues), {}, {\n        [target.name]: target.value\n      }));\n      return;\n    }\n  }, [contactValues, setContactValues]);\n\n  const handleSubmit = e => {\n    e.preventDefault();\n\n    if (validator.validate(contactValues.email)) {\n      SendEmailService.send(contactValues);\n      setContactValues({\n        name: '',\n        email: '',\n        message: '',\n        formName: FORM_NAMES.BLOG_ARTICLE_FORM\n      });\n      setModal(!modal);\n      setSubmitedModal(!submitedModal);\n    } else {\n      setError('Invalid email address!');\n      return;\n    }\n  };\n\n  return /*#__PURE__*/_jsx(_Fragment, {\n    children: /*#__PURE__*/_jsx(\"div\", {\n      className: styles.wrapper,\n      id: \"getInTouchBlockInArticle\",\n      children: /*#__PURE__*/_jsxs(\"div\", {\n        className: styles.block,\n        children: [/*#__PURE__*/_jsx(Image, {\n          layout: \"fill\",\n          src: setBackground(bgImg),\n          alt: \"img\"\n        }), /*#__PURE__*/_jsx(\"p\", {\n          className: styles.title,\n          children: en.offshoreSoftware.toUpperCase()\n        }), /*#__PURE__*/_jsx(\"p\", {\n          className: styles.text,\n          children: en.weAreReadyToHelp\n        }), /*#__PURE__*/_jsx(CustomBtn, {\n          classes: styles.button,\n          onClick: openModal,\n          title: getInTouch\n        }), /*#__PURE__*/_jsx(Modal, {\n          isOpen: modal,\n          toggle: toggleModal,\n          className: styles.modal,\n          children: /*#__PURE__*/_jsx(\"div\", {\n            className: styles.modalWrapper,\n            children: /*#__PURE__*/_jsxs(\"div\", {\n              className: styles.block,\n              children: [/*#__PURE__*/_jsxs(\"div\", {\n                children: [/*#__PURE__*/_jsx(\"p\", {\n                  className: styles.modalTitle,\n                  children: TUATitle.toUpperCase()\n                }), size.width >= 1200 && /*#__PURE__*/_jsx(\"p\", {\n                  className: styles.description,\n                  children: TUADescription\n                })]\n              }), /*#__PURE__*/_jsxs(\"div\", {\n                className: styles.inputBlock,\n                children: [/*#__PURE__*/_jsx(\"img\", {\n                  alt: \"icon\",\n                  src: \"/images/blog/elements/closeIcon.svg\",\n                  className: styles.krest,\n                  onClick: closeModal\n                }), /*#__PURE__*/_jsxs(\"form\", {\n                  id: \"TUAForm\",\n                  onSubmit: handleSubmit,\n                  children: [TUAForm.map((item, i) => {\n                    return /*#__PURE__*/_jsx(CustomInput, {\n                      type: item.type,\n                      name: item.name,\n                      required: item.required,\n                      labelText: item.label,\n                      className: styles.modalInput,\n                      placeholder: item.placeholder,\n                      onChange: changeHandler,\n                      error: item.name === 'email' ? error : null\n                    }, i);\n                  }), /*#__PURE__*/_jsx(CustomBtn, {\n                    classes: styles.button,\n                    title: submitForm\n                  })]\n                })]\n              })]\n            })\n          })\n        }), submitedModal && /*#__PURE__*/_jsxs(Modal, {\n          toggle: toggleSubmitedModal,\n          isOpen: submitedModal,\n          className: styles.submitedModal,\n          children: [/*#__PURE__*/_jsx(\"div\", {\n            className: styles.closeButton,\n            children: /*#__PURE__*/_jsx(\"img\", {\n              alt: \"icon\",\n              src: \"/images/blog/elements/closeIcon.svg\",\n              className: styles.krest,\n              onClick: toggleSubmitedModal\n            })\n          }), /*#__PURE__*/_jsx(\"div\", {\n            children: /*#__PURE__*/_jsx(\"img\", {\n              alt: \"icon\",\n              src: \"/images/get-started/modalIcon.svg\"\n            })\n          }), /*#__PURE__*/_jsxs(\"p\", {\n            children: [getInTouchModalText.split('W')[0], /*#__PURE__*/_jsx(\"br\", {}), getInTouchModalText.split('!')[1]]\n          })]\n        })]\n      })\n    })\n  });\n};\n\nexport default GetInTouch;","map":null,"metadata":{},"sourceType":"module"}