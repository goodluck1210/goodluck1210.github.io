{"ast":null,"code":"var _jsxFileName = \"E:\\\\corporate-website\\\\components\\\\AboutUs\\\\ChartComponents\\\\ChartPercentage.js\";\nimport React from \"react\";\nimport { CHART_COLORS } from \"../../../config/constants\";\nimport useWindowSize from \"../../../hooks/useWindowSize\";\nimport { getGraphIndex } from \"../../../utils/getGraphIndex\";\nimport styles from \"../OurPercentageComponent/ourPercentageComponent.module.scss\";\nimport classNames from \"classnames\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\n\nfunction ChartPercentege(props) {\n  const {\n    width\n  } = useWindowSize();\n  const {\n    percent,\n    indexParent,\n    firstPlaceData\n  } = props;\n\n  const getDataColumnsValue = prcnt => {\n    let index = getGraphIndex(width);\n\n    if (!prcnt % index) {\n      return prcnt / index;\n    } else if (prcnt % index === Number(prcnt)) {\n      return 1;\n    } else {\n      return (prcnt - prcnt % index) / index;\n    }\n  };\n\n  const getDataGraph = prcnt => {\n    let columnsValueInArray = [];\n    const columnsValue = getDataColumnsValue(prcnt);\n\n    for (let col = 1; col <= columnsValue; col++) {\n      columnsValueInArray.push(col);\n    }\n\n    return columnsValueInArray;\n  };\n\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: /*#__PURE__*/_jsxDEV(\"div\", {\n      className: styles.chartPercentageContainer,\n      children: /*#__PURE__*/_jsxDEV(\"div\", {\n        className: styles.dataGraphContainer,\n        children: [/*#__PURE__*/_jsxDEV(\"div\", {\n          className: styles.dataGraphBlocksContainer,\n          children: getDataGraph(percent).map((column, index) => /*#__PURE__*/_jsxDEV(OnePercentsBlock, {\n            color: CHART_COLORS[indexParent + 1]\n          }, index, false, {\n            fileName: _jsxFileName,\n            lineNumber: 44,\n            columnNumber: 15\n          }, this))\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 42,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: classNames(styles.dataGraphContainerTotal, Number(percent) === firstPlaceData && styles.firstPlaceData)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 50,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: styles.dataGraphContainerPercents,\n          children: [percent, \"%\"]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 56,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 41,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 40,\n      columnNumber: 7\n    }, this)\n  }, void 0, false);\n}\n\nexport default ChartPercentege;\n\nconst OnePercentsBlock = ({\n  color\n}) => {\n  const {\n    width\n  } = useWindowSize();\n  const block = [];\n\n  for (let i = 0; i < 5; ++i) {\n    block.push( /*#__PURE__*/_jsxDEV(\"div\", {\n      className: styles.onePercentBlockItem,\n      style: {\n        borderColor: color,\n        backgroundColor: color // animation: width > 400 ? \"none\" : \"\",\n\n      }\n    }, i, false, {\n      fileName: _jsxFileName,\n      lineNumber: 71,\n      columnNumber: 7\n    }, this));\n  }\n\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      children: block\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 85,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      children: block\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 86,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true);\n};","map":{"version":3,"sources":["E:/corporate-website/components/AboutUs/ChartComponents/ChartPercentage.js"],"names":["React","CHART_COLORS","useWindowSize","getGraphIndex","styles","classNames","ChartPercentege","props","width","percent","indexParent","firstPlaceData","getDataColumnsValue","prcnt","index","Number","getDataGraph","columnsValueInArray","columnsValue","col","push","chartPercentageContainer","dataGraphContainer","dataGraphBlocksContainer","map","column","dataGraphContainerTotal","dataGraphContainerPercents","OnePercentsBlock","color","block","i","onePercentBlockItem","borderColor","backgroundColor"],"mappings":";AAAA,OAAOA,KAAP,MAAkB,OAAlB;AAEA,SAASC,YAAT,QAA6B,2BAA7B;AACA,OAAOC,aAAP,MAA0B,8BAA1B;AACA,SAASC,aAAT,QAA8B,8BAA9B;AAEA,OAAOC,MAAP,MAAmB,8DAAnB;AACA,OAAOC,UAAP,MAAuB,YAAvB;;;;AAEA,SAASC,eAAT,CAAyBC,KAAzB,EAAgC;AAC9B,QAAM;AAAEC,IAAAA;AAAF,MAAYN,aAAa,EAA/B;AAEA,QAAM;AAAEO,IAAAA,OAAF;AAAWC,IAAAA,WAAX;AAAwBC,IAAAA;AAAxB,MAA2CJ,KAAjD;;AAEA,QAAMK,mBAAmB,GAAIC,KAAD,IAAW;AACrC,QAAIC,KAAK,GAAGX,aAAa,CAACK,KAAD,CAAzB;;AAEA,QAAI,CAACK,KAAD,GAASC,KAAb,EAAoB;AAClB,aAAOD,KAAK,GAAGC,KAAf;AACD,KAFD,MAEO,IAAID,KAAK,GAAGC,KAAR,KAAkBC,MAAM,CAACF,KAAD,CAA5B,EAAqC;AAC1C,aAAO,CAAP;AACD,KAFM,MAEA;AACL,aAAO,CAACA,KAAK,GAAIA,KAAK,GAAGC,KAAlB,IAA4BA,KAAnC;AACD;AACF,GAVD;;AAYA,QAAME,YAAY,GAAIH,KAAD,IAAW;AAC9B,QAAII,mBAAmB,GAAG,EAA1B;AACA,UAAMC,YAAY,GAAGN,mBAAmB,CAACC,KAAD,CAAxC;;AAEA,SAAK,IAAIM,GAAG,GAAG,CAAf,EAAkBA,GAAG,IAAID,YAAzB,EAAuCC,GAAG,EAA1C,EAA8C;AAC5CF,MAAAA,mBAAmB,CAACG,IAApB,CAAyBD,GAAzB;AACD;;AAED,WAAOF,mBAAP;AACD,GATD;;AAWA,sBACE;AAAA,2BACE;AAAK,MAAA,SAAS,EAAEb,MAAM,CAACiB,wBAAvB;AAAA,6BACE;AAAK,QAAA,SAAS,EAAEjB,MAAM,CAACkB,kBAAvB;AAAA,gCACE;AAAK,UAAA,SAAS,EAAElB,MAAM,CAACmB,wBAAvB;AAAA,oBACGP,YAAY,CAACP,OAAD,CAAZ,CAAsBe,GAAtB,CAA0B,CAACC,MAAD,EAASX,KAAT,kBACzB,QAAC,gBAAD;AAEE,YAAA,KAAK,EAAEb,YAAY,CAACS,WAAW,GAAG,CAAf;AAFrB,aACOI,KADP;AAAA;AAAA;AAAA;AAAA,kBADD;AADH;AAAA;AAAA;AAAA;AAAA,gBADF,eASE;AACE,UAAA,SAAS,EAAET,UAAU,CACnBD,MAAM,CAACsB,uBADY,EAEnBX,MAAM,CAACN,OAAD,CAAN,KAAoBE,cAApB,IAAsCP,MAAM,CAACO,cAF1B;AADvB;AAAA;AAAA;AAAA;AAAA,gBATF,eAeE;AAAK,UAAA,SAAS,EAAEP,MAAM,CAACuB,0BAAvB;AAAA,qBAAoDlB,OAApD;AAAA;AAAA;AAAA;AAAA;AAAA,gBAfF;AAAA;AAAA;AAAA;AAAA;AAAA;AADF;AAAA;AAAA;AAAA;AAAA;AADF,mBADF;AAuBD;;AAED,eAAeH,eAAf;;AAEA,MAAMsB,gBAAgB,GAAG,CAAC;AAAEC,EAAAA;AAAF,CAAD,KAAe;AACtC,QAAM;AAAErB,IAAAA;AAAF,MAAYN,aAAa,EAA/B;AACA,QAAM4B,KAAK,GAAG,EAAd;;AAEA,OAAK,IAAIC,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAG,CAApB,EAAuB,EAAEA,CAAzB,EAA4B;AAC1BD,IAAAA,KAAK,CAACV,IAAN,eACE;AAEE,MAAA,SAAS,EAAEhB,MAAM,CAAC4B,mBAFpB;AAGE,MAAA,KAAK,EAAE;AACLC,QAAAA,WAAW,EAAEJ,KADR;AAELK,QAAAA,eAAe,EAAEL,KAFZ,CAGL;;AAHK;AAHT,OACOE,CADP;AAAA;AAAA;AAAA;AAAA,YADF;AAWD;;AAED,sBACE;AAAA,4BACE;AAAA,gBAAMD;AAAN;AAAA;AAAA;AAAA;AAAA,YADF,eAEE;AAAA,gBAAMA;AAAN;AAAA;AAAA;AAAA;AAAA,YAFF;AAAA,kBADF;AAMD,CAxBD","sourcesContent":["import React from \"react\";\r\n\r\nimport { CHART_COLORS } from \"../../../config/constants\";\r\nimport useWindowSize from \"../../../hooks/useWindowSize\";\r\nimport { getGraphIndex } from \"../../../utils/getGraphIndex\";\r\n\r\nimport styles from \"../OurPercentageComponent/ourPercentageComponent.module.scss\";\r\nimport classNames from \"classnames\";\r\n\r\nfunction ChartPercentege(props) {\r\n  const { width } = useWindowSize();\r\n\r\n  const { percent, indexParent, firstPlaceData } = props;\r\n\r\n  const getDataColumnsValue = (prcnt) => {\r\n    let index = getGraphIndex(width);\r\n\r\n    if (!prcnt % index) {\r\n      return prcnt / index;\r\n    } else if (prcnt % index === Number(prcnt)) {\r\n      return 1;\r\n    } else {\r\n      return (prcnt - (prcnt % index)) / index;\r\n    }\r\n  };\r\n\r\n  const getDataGraph = (prcnt) => {\r\n    let columnsValueInArray = [];\r\n    const columnsValue = getDataColumnsValue(prcnt);\r\n\r\n    for (let col = 1; col <= columnsValue; col++) {\r\n      columnsValueInArray.push(col);\r\n    }\r\n\r\n    return columnsValueInArray;\r\n  };\r\n\r\n  return (\r\n    <>\r\n      <div className={styles.chartPercentageContainer}>\r\n        <div className={styles.dataGraphContainer}>\r\n          <div className={styles.dataGraphBlocksContainer}>\r\n            {getDataGraph(percent).map((column, index) => (\r\n              <OnePercentsBlock\r\n                key={index}\r\n                color={CHART_COLORS[indexParent + 1]}\r\n              />\r\n            ))}\r\n          </div>\r\n          <div\r\n            className={classNames(\r\n              styles.dataGraphContainerTotal,\r\n              Number(percent) === firstPlaceData && styles.firstPlaceData\r\n            )}\r\n          />\r\n          <div className={styles.dataGraphContainerPercents}>{percent}%</div>\r\n        </div>\r\n      </div>\r\n    </>\r\n  );\r\n}\r\n\r\nexport default ChartPercentege;\r\n\r\nconst OnePercentsBlock = ({ color }) => {\r\n  const { width } = useWindowSize();\r\n  const block = [];\r\n\r\n  for (let i = 0; i < 5; ++i) {\r\n    block.push(\r\n      <div\r\n        key={i}\r\n        className={styles.onePercentBlockItem}\r\n        style={{\r\n          borderColor: color,\r\n          backgroundColor: color,\r\n          // animation: width > 400 ? \"none\" : \"\",\r\n        }}\r\n      />\r\n    );\r\n  }\r\n\r\n  return (\r\n    <>\r\n      <div>{block}</div>\r\n      <div>{block}</div>\r\n    </>\r\n  );\r\n};\r\n"]},"metadata":{},"sourceType":"module"}