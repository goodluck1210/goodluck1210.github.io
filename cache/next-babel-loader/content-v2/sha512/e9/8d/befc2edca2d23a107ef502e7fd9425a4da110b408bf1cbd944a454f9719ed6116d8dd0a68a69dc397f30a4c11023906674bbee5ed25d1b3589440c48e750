{"ast":null,"code":"import { useEffect } from 'react';\nimport Router from 'next/router';\n\nfunction saveScrollPos(url, shouldScrollRestore) {\n  if (window.innerWidth > 1199) {\n    let slide = sessionStorage.getItem('slide');\n    const scrollPos = {\n      y: window.innerHeight * slide,\n      slide: slide\n    };\n    sessionStorage.setItem(url, JSON.stringify(scrollPos));\n    sessionStorage.setItem('shouldScrollRestore', shouldScrollRestore || false);\n  } else {\n    let scrollY = sessionStorage.getItem('scrollY');\n    const scrollPos = {\n      y: scrollY\n    };\n    sessionStorage.setItem(url, JSON.stringify(scrollPos));\n  }\n}\n\nfunction restoreScrollPos(url) {\n  const scrollPos = JSON.parse(sessionStorage.getItem(url));\n\n  if (scrollPos && !url.includes('blog')) {\n    window.scrollTo({\n      top: scrollPos.y\n    });\n  }\n}\n\nexport default function useScrollRestoration(router) {\n  useEffect(() => {\n    if ('scrollRestoration' in window.history) {\n      let shouldScrollRestore = false;\n      window.history.scrollRestoration = 'manual';\n      restoreScrollPos(router.asPath);\n\n      const onBeforeUnload = event => {\n        saveScrollPos(router.asPath);\n        delete event['returnValue'];\n      };\n\n      const onRouteChangeStart = () => {\n        saveScrollPos(router.asPath, shouldScrollRestore);\n      };\n\n      const onRouteChangeComplete = url => {\n        if (shouldScrollRestore) {\n          shouldScrollRestore = false;\n          restoreScrollPos(url);\n        }\n      };\n\n      window.addEventListener('beforeunload', onBeforeUnload);\n      Router.events.on('routeChangeStart', onRouteChangeStart);\n      Router.events.on('routeChangeComplete', onRouteChangeComplete);\n      Router.beforePopState(() => {\n        shouldScrollRestore = true;\n        return true;\n      });\n      return () => {\n        window.removeEventListener('beforeunload', onBeforeUnload);\n        Router.events.off('routeChangeStart', onRouteChangeStart);\n        Router.events.off('routeChangeComplete', onRouteChangeComplete);\n        Router.beforePopState(() => true);\n      };\n    }\n  }, [router]);\n}","map":null,"metadata":{},"sourceType":"module"}