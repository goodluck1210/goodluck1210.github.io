{"ast":null,"code":"function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) { symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); } keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport { useState, Fragment } from 'react';\nimport { Collapse } from 'reactstrap';\nimport { useTranslation } from \"next-export-i18n\";\nimport Crumbs from '../Technologies/components/Crumbs/Crumbs';\nimport styles from './Faq.module.scss';\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nimport { jsxs as _jsxs } from \"react/jsx-runtime\";\n\nconst FAQ = ({\n  data,\n  width\n}) => {\n  const {\n    t\n  } = useTranslation();\n  const {\n    0: isOpen,\n    1: setIsOpen\n  } = useState({\n    item1: false,\n    item2: false,\n    item3: false,\n    item4: false,\n    item5: false\n  });\n\n  const toggleCollapse = id => {\n    if (width < 1200) {\n      setIsOpen(prev => _objectSpread(_objectSpread({}, prev), {}, {\n        [`item${id}`]: !isOpen[`item${id}`]\n      }));\n      return;\n    }\n\n    if (id === 2 || id === 4) {\n      setIsOpen(prev => _objectSpread(_objectSpread({}, prev), {}, {\n        [`item${id}`]: !isOpen[`item${id}`],\n        item1: false,\n        item3: false,\n        item5: false\n      }));\n    } else if (id === 3) {\n      setIsOpen(prev => _objectSpread(_objectSpread({}, prev), {}, {\n        [`item${id}`]: !isOpen[`item${id}`],\n        item4: false,\n        item5: false\n      }));\n    } else {\n      setIsOpen(prev => _objectSpread(_objectSpread({}, prev), {}, {\n        [`item${id}`]: !isOpen[`item${id}`],\n        item2: false,\n        item3: false,\n        item4: false\n      }));\n    }\n  };\n\n  const Answer = ({\n    question,\n    answer,\n    id\n  }) => {\n    return /*#__PURE__*/_jsxs(\"div\", {\n      className: styles.item,\n      id: id,\n      children: [/*#__PURE__*/_jsxs(\"div\", {\n        className: styles.questionBlock,\n        onClick: () => toggleCollapse(id),\n        children: [/*#__PURE__*/_jsx(\"div\", {\n          className: styles.icon,\n          children: /*#__PURE__*/_jsx(\"span\", {\n            children: !isOpen[`item${id}`] ? '+' : '-'\n          })\n        }), /*#__PURE__*/_jsx(\"p\", {\n          className: styles.question,\n          children: question\n        })]\n      }), /*#__PURE__*/_jsx(Collapse, {\n        isOpen: isOpen[`item${id}`],\n        children: /*#__PURE__*/_jsx(\"div\", {\n          className: styles.answer,\n          dangerouslySetInnerHTML: {\n            __html: answer\n          }\n        })\n      })]\n    });\n  };\n\n  return /*#__PURE__*/_jsxs(\"div\", {\n    className: styles.wrapper,\n    children: [/*#__PURE__*/_jsx(\"h2\", {\n      className: styles.mainTitle,\n      children: t('questions')\n    }), /*#__PURE__*/_jsxs(\"div\", {\n      className: styles.wrapperQuestions,\n      children: [/*#__PURE__*/_jsx(\"div\", {\n        children: data.map((item, i) => {\n          return /*#__PURE__*/_jsx(Fragment, {\n            children: i <= 1 && /*#__PURE__*/_jsx(Answer, {\n              id: i + 1,\n              question: item.question,\n              answer: item.answer\n            }, i)\n          }, i);\n        })\n      }), /*#__PURE__*/_jsx(\"div\", {\n        children: data.map((item, i) => {\n          return /*#__PURE__*/_jsx(Fragment, {\n            children: i > 1 && /*#__PURE__*/_jsx(Answer, {\n              id: i + 1,\n              question: item.question,\n              answer: item.answer\n            }, i)\n          }, i);\n        })\n      })]\n    }), /*#__PURE__*/_jsx(Crumbs, {})]\n  });\n};\n\nexport default FAQ;","map":null,"metadata":{},"sourceType":"module"}