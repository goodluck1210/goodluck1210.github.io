{"ast":null,"code":"import { Collapse } from 'reactstrap';\nimport { Link, Events, scrollSpy } from 'react-scroll';\nimport { useContext, useEffect, useMemo, useState } from 'react';\nimport styles from './ContentTable.module.scss';\nimport useWindowSize from '../../../hooks/useWindowSize';\nimport classNames from 'classnames';\nimport { Context } from '../../../context/context';\nimport { en } from '../../../config/en';\nimport { useDebouncedCallback } from 'use-debounce';\nimport { Fragment as _Fragment } from \"react/jsx-runtime\";\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nimport { jsxs as _jsxs } from \"react/jsx-runtime\";\n\nconst ContentTable = ({\n  data\n}) => {\n  var _subtitles, _subtitles2, _subtitles3;\n\n  const {\n    0: isOpen,\n    1: setIsOpen\n  } = useState(false);\n  const {\n    scrollTop,\n    contentTop\n  } = useContext(Context);\n\n  const toggleCollapse = () => setIsOpen(!isOpen);\n\n  const windowSize = useWindowSize();\n  const {\n    TableOfContents\n  } = en;\n  const {\n    subtitles,\n    isNoTableOfContents\n  } = data;\n  if (isNoTableOfContents) return /*#__PURE__*/_jsx(_Fragment, {});\n  const {\n    0: active,\n    1: setActive\n  } = useState(null);\n  const {\n    0: isClicked,\n    1: setIsClicked\n  } = useState(false);\n  const {\n    0: isTableSticky,\n    1: setIsTableSticky\n  } = useState(false);\n  const {\n    0: zeroElementHeight,\n    1: setZeroElementHeight\n  } = useState([]);\n  const isDesktop = useMemo(() => windowSize.width >= 1200, [windowSize.width]);\n  const isTablet = useMemo(() => windowSize.width >= 768 && windowSize.width < 1200, [windowSize.width]);\n  const isMobile = useMemo(() => windowSize.width < 768, [windowSize.width]);\n  const ADDITIONAL_OFFSET = useMemo(() => {\n    if (isMobile) {\n      return 110;\n    } else if (isTablet) {\n      return 90;\n    } else {\n      return 60;\n    }\n  }, [windowSize.width]);\n  useEffect(() => {\n    if (false) {\n      //get height of zero element\n      const descriptionElement = document.getElementById('sub0');\n      const {\n        offsetTop,\n        offsetHeight\n      } = descriptionElement; //calculate height of zero element\n\n      setZeroElementHeight(offsetTop + offsetHeight - (ADDITIONAL_OFFSET + 10));\n\n      if (zeroElementHeight < window.scrollY && window.scrollY !== 0) {\n        setIsTableSticky(true);\n      } else {\n        setIsTableSticky(false);\n      }\n    }\n  }, [scrollTop]);\n  useEffect(() => {\n    if (false) {\n      const contentTable = document.getElementById('wrapperOfContentTable');\n      const getInTouchHeight = document.getElementById('getInTouchBlockInArticle').offsetHeight;\n\n      if (contentTable) {\n        contentTable.style.maxHeight = `${windowSize.height - 60}px`;\n      }\n\n      if (isDesktop) {\n        contentTable.style.height = 'auto';\n        contentTable.style.maxHeight = `${windowSize.height - getInTouchHeight - 102}px`;\n        contentTable.style.overflow = 'scroll';\n      }\n    }\n  }, [windowSize.width, windowSize.height]);\n\n  const handleScroll = i => {\n    //get & set active element id\n    if (!isClicked) {\n      const activeValue = +i.replace(/sub/, '');\n      setActive(activeValue);\n    }\n  };\n\n  const onSetInactive = i => {\n    //get and clear last element if scroll goes out of last element\n    const inActiveValue = +i.replace(/sub/, '');\n\n    if (inActiveValue === subtitles.length && inActiveValue === active) {\n      setActive(0);\n    }\n  };\n\n  useEffect(() => {\n    if (!isDesktop) {\n      if (isOpen) {\n        document.body.classList.add('no-sroll');\n      } else {\n        document.body.classList.remove('no-sroll');\n      }\n    }\n  }, [isOpen]);\n  const isShow = useMemo(() => scrollTop > contentTop, [scrollTop, contentTop]);\n  const containerStyles = useMemo(() => {\n    return {\n      tablet: {\n        position: isTableSticky ? 'relative' : 'absolute'\n      },\n      desktop: {\n        position: 'relative',\n        width: '100%'\n      }\n    };\n  }, [isTableSticky]);\n  const setIsClickedWhitDebounce = useDebouncedCallback(setIsClicked, 1000);\n  useEffect(() => {\n    Events.scrollEvent.register('begin', function (to) {\n      const activeValue = +to.replace(/sub/, '');\n      setActive(activeValue);\n      setIsClicked(true); //change isClicked after 1 sec to false\n\n      setIsClickedWhitDebounce.callback(false); //close modal\n\n      setIsOpen(false);\n    });\n    scrollSpy.update();\n    return () => {\n      Events.scrollEvent.remove('begin');\n    };\n  }, [active, isOpen]);\n  return /*#__PURE__*/_jsx(_Fragment, {\n    children: /*#__PURE__*/_jsx(\"div\", {\n      className: classNames(styles.wrapper, !isDesktop && isTableSticky && styles.withStickyState, 'container'),\n      style: {\n        position: !isDesktop && isTableSticky ? 'fixed' : 'sticky'\n      },\n      children: /*#__PURE__*/_jsxs(\"div\", {\n        style: isDesktop ? containerStyles.desktop : containerStyles.tablet,\n        className: classNames(styles.container, !isDesktop && isTableSticky && styles.containerFixed),\n        id: \"wrapperOfContentTable\",\n        children: [/*#__PURE__*/_jsxs(\"div\", {\n          className: styles.header,\n          children: [scrollTop > zeroElementHeight && !isDesktop ? /*#__PURE__*/_jsxs(_Fragment, {\n            children: [isTablet && /*#__PURE__*/_jsx(\"h3\", {\n              className: styles.headerContent,\n              children: \"CONTENT:\"\n            }), /*#__PURE__*/_jsx(\"h3\", {\n              className: styles.subTitle,\n              children: ((_subtitles = subtitles[active - 1]) === null || _subtitles === void 0 ? void 0 : _subtitles.title.length) > 46 ? `${(_subtitles2 = subtitles[active - 1]) === null || _subtitles2 === void 0 ? void 0 : _subtitles2.title.slice(0, 46)}...` : (_subtitles3 = subtitles[active - 1]) === null || _subtitles3 === void 0 ? void 0 : _subtitles3.title\n            })]\n          }) : /*#__PURE__*/_jsx(\"h3\", {\n            className: styles.title,\n            children: TableOfContents\n          }), /*#__PURE__*/_jsx(\"div\", {\n            className: styles.openBlock,\n            onClick: toggleCollapse,\n            children: !isOpen ? /*#__PURE__*/_jsxs(_Fragment, {\n              children: [/*#__PURE__*/_jsx(\"ins\", {\n                children: isMobile ? 'More' : 'Show more'\n              }), /*#__PURE__*/_jsx(\"img\", {\n                src: \"/images/blog/elements/greenNavDown.svg\",\n                alt: \"img\"\n              })]\n            }) : /*#__PURE__*/_jsxs(_Fragment, {\n              children: [/*#__PURE__*/_jsx(\"ins\", {\n                children: isMobile ? 'Less' : 'Show less'\n              }), /*#__PURE__*/_jsx(\"img\", {\n                src: \"/images/blog/elements/greenNavUp.svg\",\n                alt: \"img\"\n              })]\n            })\n          })]\n        }), /*#__PURE__*/_jsx(Collapse, {\n          isOpen: isDesktop ? true : isOpen,\n          children: /*#__PURE__*/_jsxs(\"div\", {\n            id: \"content\",\n            className: classNames(styles.content, isShow && !isMobile && styles.tabletPadding),\n            children: [!isShow && !isDesktop && /*#__PURE__*/_jsx(\"div\", {\n              className: styles.line\n            }), isDesktop && /*#__PURE__*/_jsx(\"div\", {\n              className: styles.line\n            }), subtitles.map((item, i) => {\n              return /*#__PURE__*/_jsxs(Link // activeClass={styles.picked}\n              , {\n                to: `sub${item.id}`,\n                spy: true,\n                spyThrottle: 300,\n                smooth: \"linear\",\n                offset: -ADDITIONAL_OFFSET,\n                duration: 300,\n                isDynamic: true,\n                onSetInactive: i => onSetInactive(i),\n                onSetActive: i => handleScroll(i),\n                className: classNames(styles.pickedBlock, active === item.id && styles.picked),\n                children: [/*#__PURE__*/_jsx(\"img\", {\n                  src: \"/images/blog/elements/blogArrow.svg\",\n                  alt: \"icon\"\n                }), /*#__PURE__*/_jsx(\"p\", {\n                  className: styles.item,\n                  style: {\n                    paddingLeft: item.subtitle ? 10 : 0\n                  },\n                  children: item.title\n                })]\n              }, i);\n            })]\n          })\n        })]\n      })\n    })\n  });\n};\n\nexport default ContentTable;","map":null,"metadata":{},"sourceType":"module"}