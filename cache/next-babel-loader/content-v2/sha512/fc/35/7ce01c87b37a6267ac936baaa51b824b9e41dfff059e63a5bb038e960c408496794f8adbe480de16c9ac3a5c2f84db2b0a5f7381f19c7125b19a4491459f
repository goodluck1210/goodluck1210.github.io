{"ast":null,"code":"function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) { symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); } keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport React from \"react\";\nimport classNames from \"classnames\";\nimport { withRouter } from \"next/router\"; // utils\n\nimport animatedScrollTo from \"./utils/animated-scroll-to\";\nimport isMobileDevice from \"./utils/is-mobile\";\nimport { getObjectValues } from \"./utils/helpers\";\nimport S from \"./style/scroll.module.scss\";\nimport { caseSidebarEventListener, clientsAboutUsBtnEventListeners } from \"./utils/eventListeners\"; // Components\n\nimport ScrollSection from \"./ScrollSection\";\nimport ScrollControls from \"./ScrollControls\";\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nimport { jsxs as _jsxs } from \"react/jsx-runtime\";\nconst scrollMode = {\n  FULL_PAGE: \"full-page\",\n  NORMAL: \"normal\"\n};\nexport class Scroll extends React.Component {\n  constructor(props) {\n    super(props);\n\n    _defineProperty(this, \"onResize\", () => {\n      this._slides = [];\n\n      if (window.innerWidth < 1200 || window.innerHeight < 411) {\n        this._scrollMode = scrollMode.NORMAL;\n      } else this._scrollMode = scrollMode.FULL_PAGE;\n\n      for (let i = 0; i < this._slidesCount; i++) {\n        this._slides.push(window.innerHeight * i);\n      }\n\n      this.setState({\n        height: window.innerHeight\n      });\n    });\n\n    _defineProperty(this, \"onTouchStart\", evt => {\n      this._touchStart = evt.touches[0].clientY;\n      this._isScrolledAlready = false;\n    });\n\n    _defineProperty(this, \"onTouchMove\", evt => {\n      if (this._scrollMode !== scrollMode.FULL_PAGE) {\n        return;\n      }\n\n      evt.preventDefault();\n      const touchEnd = evt.changedTouches[0].clientY;\n\n      if (!this._isScrollPending && !this._isScrolledAlready) {\n        if (this._touchStart > touchEnd + this._touchSensitivity) {\n          this.scrollToSlide(this.state.activeSlide + 1);\n        } else if (this._touchStart < touchEnd - this._touchSensitivity) {\n          this.scrollToSlide(this.state.activeSlide - 1);\n        }\n      }\n    });\n\n    _defineProperty(this, \"onScroll\", evt => {\n      if (this._scrollMode !== scrollMode.FULL_PAGE) {\n        return;\n      }\n\n      evt.preventDefault();\n\n      if (this._isScrollPending) {\n        return;\n      }\n\n      const scrollDown = (evt.wheelDelta || -evt.deltaY || -evt.detail) < 0;\n\n      if (scrollDown) {\n        this.scrollToSlide(this.state.activeSlide + 1);\n      } else {\n        this.scrollToSlide(this.state.activeSlide - 1);\n      }\n    });\n\n    _defineProperty(this, \"getSlidesCount\", () => this._slidesCount);\n\n    _defineProperty(this, \"getCurrentSlideIndex\", () => this.state.activeSlide);\n\n    _defineProperty(this, \"scrollNext\", () => {\n      this.scrollToSlide(this.state.activeSlide + 1);\n    });\n\n    _defineProperty(this, \"scrollPrev\", () => {\n      this.scrollToSlide(this.state.activeSlide - 1);\n    });\n\n    _defineProperty(this, \"scrollToSlide\", slide => {\n      if (!this._isScrollPending && slide >= 0 && slide < this._slidesCount) {\n        const currentSlide = this.state.activeSlide;\n        this.props.beforeChange({\n          from: currentSlide,\n          to: slide\n        });\n        sessionStorage.setItem(\"slide\", slide);\n        this.setState({\n          activeSlide: slide\n        });\n        this._isScrollPending = true;\n        animatedScrollTo(this._slides[slide], this.props.duration, () => {\n          this._isScrollPending = false;\n          this._isScrolledAlready = true;\n          this.props.afterChange({\n            from: currentSlide,\n            to: slide\n          });\n        });\n      }\n    });\n\n    _defineProperty(this, \"scrollToSlideTablet\", slide => {\n      const elem = document.getElementById(`caseSection-${slide}`);\n      this.setState({\n        activeSlide: slide\n      });\n      sessionStorage.setItem(\"slide\", slide);\n      elem.scrollIntoView({\n        block: \"start\",\n        behavior: \"smooth\"\n      });\n    });\n\n    this._isScrollPending = false;\n    this._isScrolledAlready = false;\n    this._slides = [];\n    this._slidesCount = Scroll.getChildrenCount(this.props.children) + this.props.additionalElements;\n    this._touchSensitivity = 5;\n    this._touchStart = 0;\n    this._isMobile = null;\n    this._scrollMode = scrollMode.FULL_PAGE;\n    this.state = {\n      activeSlide: props.initialSlide\n    };\n  }\n\n  componentDidMount() {\n    // scroll to previous page slide\n    const shouldScrollRestore = JSON.parse(sessionStorage.getItem(\"shouldScrollRestore\"));\n    const scrollPos = JSON.parse(sessionStorage.getItem(this.props.router.asPath));\n\n    if (shouldScrollRestore && scrollPos) {\n      this.setState({\n        activeSlide: +scrollPos.slide\n      });\n      sessionStorage.setItem(\"slide\", scrollPos.slide);\n\n      if (window.innerWidth < 1200) {\n        window.scroll(0, +scrollPos.y);\n      }\n    } else {\n      this.setState({\n        activeSlide: 0\n      });\n      sessionStorage.setItem(\"slide\", \"0\");\n    } // end scroll to previous page slide\n\n\n    this._isMobile = isMobileDevice();\n\n    if (this._isMobile) {\n      document.addEventListener(\"touchmove\", this.onTouchMove, {\n        passive: false\n      });\n      document.addEventListener(\"touchstart\", this.onTouchStart);\n    } else {\n      document.addEventListener(\"wheel\", this.onScroll, {\n        passive: false\n      });\n    }\n\n    window.addEventListener(\"resize\", this.onResize);\n    const casePageScrollItems = document.getElementsByClassName(\"caseScroll\");\n    caseSidebarEventListener(casePageScrollItems, this.scrollToSlide, this.scrollToSlideTablet);\n    clientsAboutUsBtnEventListeners(this.scrollToSlide);\n    this.onResize(); //hide scrollbar\n\n    document.body.style.overflow = \"hidden\";\n  }\n\n  componentDidUpdate() {\n    if (this._scrollMode == \"normal\") {\n      document.body.style.overflow = \"visible\";\n    }\n\n    if (this._scrollMode == \"full-page\") {\n      document.body.style.overflow = \"hidden\";\n    }\n  }\n\n  componentWillUnmount() {\n    if (this._isMobile) {\n      document.removeEventListener(\"touchmove\", this.onTouchMove);\n      document.removeEventListener(\"touchstart\", this.onTouchStart);\n    } else {\n      document.removeEventListener(\"wheel\", this.onScroll);\n    }\n\n    window.removeEventListener(\"resize\", this.onResize);\n    document.body.style.overflow = \"visible\";\n    sessionStorage.setItem(\"scrollY\", window.scrollY);\n  }\n\n  renderControls() {\n    const {\n      controls,\n      controlsProps,\n      titles\n    } = this.props;\n    if (!controls) return null;\n    const controlsBasicProps = {\n      activeSlide: this.state.activeSlide,\n      getCurrentSlideIndex: this.getCurrentSlideIndex,\n      onNext: this.scrollNext,\n      onPrev: this.scrollPrev,\n      scrollToSlide: this.scrollToSlide,\n      slidesCount: this.getSlidesCount(),\n      titles\n    };\n\n    if (controls === true) {\n      return /*#__PURE__*/_jsx(ScrollControls, _objectSpread(_objectSpread({}, controlsBasicProps), controlsProps));\n    }\n\n    const CustomControls = controls;\n    return /*#__PURE__*/_jsx(CustomControls, _objectSpread(_objectSpread({}, controlsBasicProps), controlsProps));\n  }\n\n  render() {\n    return /*#__PURE__*/_jsxs(\"div\", {\n      className: classNames(S.Scroll, this.props.className, this._scrollMode === scrollMode.NORMAL ? S[\"Scroll--normal\"] : \"\"),\n      children: [this.renderControls(), this.props.children, !this.props.router.asPath.includes(\"our-work\") && !this.props.router.asPath.includes(\"get-started\") && /*#__PURE__*/_jsx(\"div\", {\n        className: S.mouseWrapper,\n        onClick: () => this.scrollToSlide(1),\n        children: /*#__PURE__*/_jsx(\"div\", {\n          className: S.mouse,\n          children: /*#__PURE__*/_jsx(\"p\", {\n            children: \"Scroll\"\n          })\n        })\n      })]\n    });\n  }\n\n}\n\n_defineProperty(Scroll, \"defaultProps\", {\n  afterChange: () => {},\n  beforeChange: () => {},\n  controls: true,\n  controlsProps: {},\n  duration: 1000,\n  initialSlide: 0,\n  additionalElements: 1\n});\n\n_defineProperty(Scroll, \"getChildrenCount\", children => {\n  const childrenArr = React.Children.toArray(children);\n  const slides = childrenArr.filter(({\n    type\n  }) => type === ScrollSection);\n  return slides.length;\n});\n\nexport default withRouter(Scroll);","map":null,"metadata":{},"sourceType":"module"}