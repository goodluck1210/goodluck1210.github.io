{"ast":null,"code":"\"use strict\";\n\nfunction _createForOfIteratorHelper(o, allowArrayLike) { var it = typeof Symbol !== \"undefined\" && o[Symbol.iterator] || o[\"@@iterator\"]; if (!it) { if (Array.isArray(o) || (it = _unsupportedIterableToArray(o)) || allowArrayLike && o && typeof o.length === \"number\") { if (it) o = it; var i = 0; var F = function F() {}; return { s: F, n: function n() { if (i >= o.length) return { done: true }; return { done: false, value: o[i++] }; }, e: function e(_e) { throw _e; }, f: F }; } throw new TypeError(\"Invalid attempt to iterate non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\"); } var normalCompletion = true, didErr = false, err; return { s: function s() { it = it.call(o); }, n: function n() { var step = it.next(); normalCompletion = step.done; return step; }, e: function e(_e2) { didErr = true; err = _e2; }, f: function f() { try { if (!normalCompletion && it[\"return\"] != null) it[\"return\"](); } finally { if (didErr) throw err; } } }; }\n\nfunction _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === \"string\") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === \"Object\" && o.constructor) n = o.constructor.name; if (n === \"Map\" || n === \"Set\") return Array.from(o); if (n === \"Arguments\" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }\n\nfunction _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.detectDomainLocale = detectDomainLocale;\n\nfunction detectDomainLocale(domainItems, hostname, detectedLocale) {\n  var domainItem;\n\n  if (domainItems) {\n    if (detectedLocale) {\n      detectedLocale = detectedLocale.toLowerCase();\n    }\n\n    var _iterator = _createForOfIteratorHelper(domainItems),\n        _step;\n\n    try {\n      for (_iterator.s(); !(_step = _iterator.n()).done;) {\n        var item = _step.value;\n        var ref, ref1; // remove port if present\n\n        var domainHostname = (ref = item.domain) === null || ref === void 0 ? void 0 : ref.split(':')[0].toLowerCase();\n\n        if (hostname === domainHostname || detectedLocale === item.defaultLocale.toLowerCase() || ((ref1 = item.locales) === null || ref1 === void 0 ? void 0 : ref1.some(function (locale) {\n          return locale.toLowerCase() === detectedLocale;\n        }))) {\n          domainItem = item;\n          break;\n        }\n      }\n    } catch (err) {\n      _iterator.e(err);\n    } finally {\n      _iterator.f();\n    }\n  }\n\n  return domainItem;\n}","map":{"version":3,"sources":["../../../../shared/lib/i18n/detect-domain-locale.ts"],"names":[],"mappings":";;;;;;;;;;;QAEgB,kB,GAAA,kB;;SAAA,kB,CACd,W,EACA,Q,EACA,c,EACA;AACA,MAAI,UAAJ;;AAEA,MAAI,WAAJ,EAAiB;AACf,QAAI,cAAJ,EAAoB;AAClB,MAAA,cAAc,GAAG,cAAc,CAAC,WAAf,EAAjB;AACD;;AAHc,+CAKI,WALJ;AAAA;;AAAA;AAKV,0DAA2B;AAAA,YAArB,IAAqB;YAEP,G,EAIrB,I,CAN4B,CAC9B;;AACA,YAAM,cAAc,GAAA,CAAG,GAAW,GAAX,IAAI,CAAC,MAAR,MAAc,IAAd,IAAG,GAAW,KAAA,KAAX,CAAH,GAAqB,KAAlB,CAAH,GAAG,GAAW,CAAE,KAAb,CAAkB,GAAlB,EAAwB,CAAxB,EAA2B,WAA3B,EAAvB;;AACA,YACE,QAAQ,KAAK,cAAb,IACA,cAAc,KAAK,IAAI,CAAC,aAAL,CAAmB,WAAnB,EADnB,KACiD,CACjD,IAAY,GAAZ,IAAI,CAAC,OAD4C,MACrC,IADqC,IACjD,IAAY,KAAA,KAAZ,CADiD,GAC/B,KAAlB,CADiD,GACjD,IAAY,CAAE,IAAd,CAAkB,UAAE,MAAF;AAAA,iBAAa,MAAM,CAAC,WAAP,OAAyB,cAAtC;AAAA,SAAlB,CAFA,CADF,EAIE;AACA,UAAA,UAAU,GAAG,IAAb;;AAED;AACF;AAhBc;AAAA;AAAA;AAAA;AAAA;AAiBhB;;SAEM,U;AACR","sourcesContent":["import type { DomainLocale } from '../../../server/config-shared'\n\nexport function detectDomainLocale(\n  domainItems?: DomainLocale[],\n  hostname?: string,\n  detectedLocale?: string\n) {\n  let domainItem: DomainLocale | undefined\n\n  if (domainItems) {\n    if (detectedLocale) {\n      detectedLocale = detectedLocale.toLowerCase()\n    }\n\n    for (const item of domainItems) {\n      // remove port if present\n      const domainHostname = item.domain?.split(':')[0].toLowerCase()\n      if (\n        hostname === domainHostname ||\n        detectedLocale === item.defaultLocale.toLowerCase() ||\n        item.locales?.some((locale) => locale.toLowerCase() === detectedLocale)\n      ) {\n        domainItem = item\n        break\n      }\n    }\n  }\n\n  return domainItem\n}\n"]},"metadata":{},"sourceType":"script"}